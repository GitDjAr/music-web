name: Publish And Deploy Demo # 自动部署的名称
on:
  push:
    tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
      - "v*"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 运行环境，告诉它运行在什么环境
    steps: # 步骤
      # 第一步：下载源码（CI/CD拉取代码到自己的本地）
      - name: Checkout
        uses: actions/checkout@master
      # 第二步：打包构建
      - name: Build
        uses: actions/setup-node@master
        # 构建使用 npm ci 加速  https://dwye.dev/post/github-action-npm-cache/ ,https://blog.csdn.net/Hodors/article/details/127726899
        with:
          node-version: 14.19.0
          cache: "npm"
      - run: npm install
      # - run: npm install # 安装第三方包
      - run: npm run b # 打包
      - run: tar -zcvf release.tgz dist/
        # 把.nuxt、nuxt.config.js等文件，打包压缩为release.tgz

      # 第三步：发布 Release
      - name: Create Release # 创建Release，可以在仓库看到一个个版本
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }} # 之前GitHub添加的Token
        with:
          tag_name: ${{ github.ref }} # (tag)标签名称
          release_name: Release ${{ github.ref }}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 第四步：上传构建结果到 Release（把打包的tgz上传到Release）
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release.tgz # 要上传文件
          asset_name: release.tgz # 上传后的文件名
          asset_content_type: application/x-tgz

      # 第五步：部署到服务器
      - name: Deploy
        uses: appleboy/ssh-action@master # 使用ssh链接服务器
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script:
            | # 执行命令（运行到服务器）cd：要确保服务器有这个目录； wget：下载上一步的release到服务器； tar：解压； 安装依赖；启动服务
            cd /usr/local/nginx/html
            wget https://ghproxy.com/https://github.com/GitDjAr/music-web/releases/latest/download/release.tgz -O music.tgz
            tar zxvf music.tgz
            rm -rf music.tgz

            # npm install --production
            # pm2 reload pm2.config.json

      - name: 计算签名-发送通知到钉钉
        shell: node {0}
        run: |
          const crypto = require("crypto");
          const querystring = require("querystring");
          const https = require("https");

          const timestamp = Date.now();
          const secret = ${{ secrets.DINGDING_SECRET }};
          const stringToSign = `${timestamp}\n${secret}`;
          const hmac = crypto.createHmac("sha256", secret);
          hmac.update(stringToSign);
          const sign = querystring.escape(hmac.digest("base64"));

          const data = JSON.stringify({
            text: {
              content: "发版成功啦~\n,${{ github.ref }}",
            },
            msgtype: "text",
          });

          const options = {
            hostname: "oapi.dingtalk.com",
            port: 443,
            path: `/robot/send?access_token=${{ secrets.DINGDING_TOKEN }}&sign=${sign}&timestamp=${timestamp}`,
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Content-Length": data.length,
            },
          };

          const req = https.request(options, (res) => {
            console.log(`statusCode: ${res.statusCode}`);

            res.on("data", (d) => {
              process.stdout.write(d);
            });
          });

          req.on("error", (error) => {
            console.error(error);
          });

          req.write(data);
          req.end();

        # 成功或者失败都会触发钩子
        # notify:
        # needs: build
        # runs-on: ubuntu-latest

        # # if: ${{ needs.build.result == 'success' }}

        # steps:
        #   # 步骤1：安装 curl 工具
        #   - name: Install curl
        #     run: sudo apt-get install curl -y

        #   # 步骤2：发送通知到 Slack
        #   - name: Send Notification
        #     env:
        #       SLACK_WEBHOOK_URL: ${{ https://oapi.dingtalk.com/robot/send?access_token=4461e6fe281c137ddd08169a16dd3ac2f7d180b7f65c3dfdf0c9867975b78f58&secret=SECaf718f3378854a3f55c6e14dddb41beb26daa5f96fa3e137eedcc2b66cf15f49&timestamp=1689240675086 }}
        #     run: |
        #       curl -X POST -H 'Content-type: application/json' --data '{"text":"Workflow succeeded!"}' $SLACK_WEBHOOK_URL
        # 您好，这是必应。您可以尝试以下几个 Github 镜像网站：
        # github.com.cnpmjs.org1
        # hub.fastgit.org1
        # gitclone.com2
        # ghproxy.com2
        # toolwa.com/github/2
        # github.wuyanzheshui.workers.dev3
